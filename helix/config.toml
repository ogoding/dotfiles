theme = "catppuccin_mocha"

[editor]
true-color = true
line-number = "relative"
cursorline = true
cursorcolumn = true
bufferline = "multiple"
color-modes = true
# TODO: Try even lower
idle-timeout = 200

insert-final-newline = true
trim-final-newlines = false
trim-trailing-whitespace = false

auto-save.focus-lost = true
auto-save.after-delay.enable = true
# range: [0; u64::MAX] default: 3000
auto-save.after-delay.timeout = 200

end-of-line-diagnostics = "hint"

[editor.soft-wrap]
enable = true

[editor.file-picker]
hidden = true
parents = true
ignore = true
git-ignore = true
git-global = true
git-exclude = true

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.indent-guides]
render = true
skip-levels = 0

[editor.lsp]
display-inlay-hints = true
display-messages = true

[editor.statusline]
left = ["mode", "spinner"]
center = ["file-name", "read-only-indicator", "file-modification-indicator"]
right = ["diagnostics", "selections", "register", "separator", "position", "total-line-numbers", "separator", "file-encoding", "file-line-ending", "file-type"]
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"

[editor.inline-diagnostics]
cursor-line = "error"
other-lines = "error"

[keys.normal]
# tab = "select_next_sibling"
# S-tab = "select_prev_sibling"
C-j = "save_selection"
C-z = [":write-all", "suspend"]

esc = ["collapse_selection", "keep_primary_selection"]


# C-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
# C-k = ["extend_to_line_bounds", "delete_selection", "move_line_up", "paste_before"]
# "A-j" = [ "extend_to_line_bounds", "extend_line_below", "split_selection_on_newline", "rotate_selection_contents_forward", "rotate_selections_backward", "keep_primary_selection" ]
# "A-k" = [ "extend_to_line_bounds", "extend_line_above", "split_selection_on_newline", "rotate_selection_contents_forward", "keep_primary_selection" ]
# "A-j" = [ "keep_primary_selection", "move_line_down", "extend_to_line_bounds", "extend_line_above", "split_selection_on_newline", "select_mode", "goto_line_end_newline", "normal_mode", "rotate_selection_contents_forward", "keep_primary_selection", "move_line_down" ]
# "A-k" = [ "keep_primary_selection", "extend_to_line_bounds", "extend_line_above", "split_selection_on_newline", "select_mode", "goto_line_end_newline", "normal_mode", "rotate_selection_contents_forward", "keep_primary_selection" ]


[keys.normal."["]
"[" = "goto_previous_buffer"
j = "jump_backward"

[keys.normal."]"]
"]" = "goto_next_buffer"
j = "jump_forward"

# TODO: Create a goto next/previous merge conflict (go to next sequence of <<<<<<<<|=======|>>>>>>>>)
# - use the new `copy_between_registers` command (or just do the copying manually) and temporarily stash whatever is in the `/` register before searching, swap back after searching
# - because macros can't be used in a keybind sequence (see below keybinds on symbol_picker) a temporary solution would be to have a secondary macro to swap between a 'stash' register manually
# m = ""

[keys.normal.backspace]
q = ":buffer-close"
Q = ":buffer-close-others"

r = ":reload-all"
f = ":format"
F = ":reflow"

U = ":pipe uniq"
S = ":sort"

# Save selection to the jumplist
S = "save_selection"
d = ":yank-diagnostic"
y = "yank_joined"
Y = "yank_joined_to_clipboard"

# Yank the current selection into the search register
s = "@\"/y"
# c = "copy_between_registers"

# See the following github issue for tracking macros in a keybind sequence
# https://github.com/helix-editor/helix/issues/12420
# c = ["symbol_picker", "@%k class "]
# v = ["symbol_picker", "@%k function "]

h = ":toggle lsp.display-inlay-hints"
# TODO: Add a keybind to disable highlighting. It can be very distracting when resolving merge conflicts

b = ":echo %sh{git blame -L %{cursor_line},+1 %{buffer_name}}"

[keys.insert]
tab = "indent"
S-tab = "unindent"
